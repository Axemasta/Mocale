using System.Collections.Immutable;
using System.Text;
using System.Text.Json;
using System.Text.RegularExpressions;
using Humanizer;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace Mocale.SourceGenerators;

[Generator]
public class LocalizationKeySourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var assemblyName = context.CompilationProvider.Select(static (c, _) => c.AssemblyName);

        // TODO: Provide easy way to bundle as ER & Additional File
        var constants = context.AdditionalTextsProvider
            .Where(FileMatches)
            .Select((text, token) => text.GetText(token)?.ToString())
            .Where(text => text is not null)!
            .Collect<string>();

        var combined = constants.Combine(assemblyName);

        context.RegisterSourceOutput(combined, GenerateCode);
    }

    private bool FileMatches(AdditionalText text)
    {
        var fileName = Path.GetFileNameWithoutExtension(text.Path);
        var extension = Path.GetExtension(text.Path);

        var match = Regex.IsMatch(fileName, "^[A-Za-z]{2,4}([_-][A-Za-z]{4})?([_-]([A-Za-z]{2}|[0-9]{3}))?$");

        return match && extension.Equals(".json", StringComparison.OrdinalIgnoreCase);
    }

    private static Dictionary<string, string> GetTranslationUniqueKeys(List<string> translationsJson)
    {
        // TODO: we need sanitized keys to to preserve the json key value...
        var uniqueKeys = new Dictionary<string, string>();

        foreach (var translationJson in translationsJson)
        {
            try
            {
                var translations = JsonSerializer.Deserialize<Dictionary<string, string>>(translationJson);

                if (translations is null)
                {
                    continue;
                }

                foreach(var translation in translations)
                {
                    var sanitizedKey = SanitizeKey(translation.Key);

                    if (!uniqueKeys.ContainsKey(sanitizedKey))
                    {
                        uniqueKeys.Add(sanitizedKey, translation.Key);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("An exception occurred processing translation json:");
                Console.WriteLine(translationJson);
                Console.WriteLine(ex);
            }
        }

        return uniqueKeys;
    }

    private static string SanitizeKey(string dirtyKey)
    {
        // https://stackoverflow.com/a/11396038
        var removeChars = new HashSet<char>(" ?&^$#@!()+-,:;<>â€™\'-*.");
        var result = new StringBuilder(dirtyKey.Length);

        foreach (var c in dirtyKey)
        {
            if (!removeChars.Contains(c)) // prevent dirty chars
            {
                result.Append(c);
            }
        }

        return result.ToString().Pascalize();
    }

    private static void GenerateCode(SourceProductionContext context, (ImmutableArray<string> Translations, string? AssemblyName) args)
    {
        var translationKeys = GetTranslationUniqueKeys(args.Translations.ToList());

        var ns = args.AssemblyName ?? "Mocale";

        ns += ".Translations";

        var source = GenerateSource(ns, translationKeys);

        context.AddSource("MocaleTranslationKeys.g.cs", SourceText.From(source, Encoding.UTF8));
    }

    private static string GenerateSource(string generatedNamespace, Dictionary<string, string> keysToGenerate)
    {
        // Build up the source code
        var constantTemplate = "public const string {0} = \"{1}\";";
        var commentTemplate = "/// Looks up a localized string using key {0}.";

        var formattedProperties = new Dictionary<string, string>();

        foreach (var key in keysToGenerate)
        {
            // TODO: Handle auto accessibility translations
            // if (camelKey.EndsWith("Accessibility", StringComparison.Ordinal))
            // {
            //     // Accessibility keys are automatically paired to the original keys
            //     // Aka the key: KeyOne
            //     // will be used for "{mocale:Translate {x:Static keys:KeyOne}}"
            //     // and
            //     // "{mocale:TranslateAccessibility {x:Static keys:KeyOne}}"
            //     continue;
            // }

            var template = string.Format(constantTemplate, key.Key, key.Value);

            var comment = string.Format(commentTemplate, key.Value);

            formattedProperties.Add(template, comment);
        }

        var source = $@"// <auto-generated/>
namespace {generatedNamespace};

public static class TranslationKeys
{{
";

        var sb = new StringBuilder();

        sb.Append(source);

        var i = 0;

        foreach (var property in formattedProperties)
        {
            if (i > 0)
            {
                sb.AppendLine();
                sb.AppendLine();
            }

            sb.Append(new string('\t', 1));
            sb.AppendLine("/// <summary>");
            sb.Append(new string('\t', 1));
            sb.AppendLine(property.Value);
            sb.Append(new string('\t', 1));
            sb.AppendLine("/// </summary>");
            sb.Append(new string('\t', 1));
            sb.AppendLine(property.Key);

            i++;
        }

        sb.AppendLine("}");

        return sb.ToString();
    }
}
