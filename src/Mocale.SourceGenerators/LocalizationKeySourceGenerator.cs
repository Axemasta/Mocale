using System.Collections.Immutable;
using System.Text;
using System.Text.Json;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
namespace Mocale.SourceGenerators;

[Generator]
public class LocalizationKeySourceGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var assemblyName = context.CompilationProvider.Select(static (c, _) => c.AssemblyName);

        // TODO: Read all locale json files
        // TODO: Provide easy way to bundle as ER & Additional File
        var constants = context.AdditionalTextsProvider
            .Where(text => text.Path.EndsWith("en-GB.json", StringComparison.OrdinalIgnoreCase))
            .Select((text, token) => text.GetText(token)?.ToString())
            .Where(text => text is not null)!
            .Collect<string>();

        var combined = constants.Combine(assemblyName);

        context.RegisterSourceOutput(combined, GenerateCode);
    }

    private static void GenerateCode(SourceProductionContext context, (ImmutableArray<string> Constants, string? AssemblyName) args)
    {
        if (!args.Constants.Any())
        {
            return;
        }

        var constantsJson = args.Constants.First();

        var constants = JsonSerializer.Deserialize<Dictionary<string, string>>(constantsJson);

        if (constants is null)
        {
            return;
        }

        var ns = args.AssemblyName ?? "GeneratedConstants";

        var source = GenerateSource(ns, constants);

        context.AddSource("Translations.g.cs", SourceText.From(source, Encoding.UTF8));
    }

    private static string GenerateSource(string generatedNamespace, Dictionary<string, string> constantsToGenerate)
    {
        // Build up the source code
        var constantTemplate = "public const string {0} = \"{1}\";";
        var commentTemplate = "/// Looks up a localized string similar to: {0}.";

        var formattedProperties = new Dictionary<string, string>();

        foreach (var kvp in constantsToGenerate)
        {
            // TODO: Camelize this key
            var camelKey = kvp.Key;

            // TODO: Handle auto accessibility translations
            // if (camelKey.EndsWith("Accessibility", StringComparison.Ordinal))
            // {
            //     // Accessibility keys are automatically paired to the original keys
            //     // Aka the key: KeyOne
            //     // will be used for "{mocale:Translate {x:Static keys:KeyOne}}"
            //     // and
            //     // "{mocale:TranslateAccessibility {x:Static keys:KeyOne}}"
            //     continue;
            // }

            var template = string.Format(constantTemplate, camelKey, kvp.Value);

            var comment = string.Format(commentTemplate, kvp.Value);

            formattedProperties.Add(template, comment);
        }

        var source = $@"// <auto-generated/>
namespace {generatedNamespace};

public static class TranslationKeys
{{
";

        var sb = new StringBuilder();

        sb.Append(source);

        var i = 0;

        foreach (var property in formattedProperties)
        {
            if (i > 0)
            {
                sb.AppendLine();
                sb.AppendLine();
            }

            sb.Append(new string('\t', 1));
            sb.AppendLine("/// <summary>");
            sb.Append(new string('\t', 1));
            sb.AppendLine(property.Value);
            sb.Append(new string('\t', 1));
            sb.AppendLine("/// </summary>");
            sb.Append(new string('\t', 1));
            sb.AppendLine(property.Key);

            i++;
        }

        sb.AppendLine();
        sb.AppendLine("}");

        return sb.ToString();
    }
}
